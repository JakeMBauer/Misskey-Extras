:: Util {
  @pipe(els) {
    #len = Arr:len(els)

    ? (len = 0) {
      << _
    }

    #result = els[1]

    @run(i) {
      ? (i > len) {
        << result
      }

      #el = els[i]
      result <- el(result)

      run((i + 1))
    }

    run(2)
  }

  @merge(obj1, obj2) {
    #o = Obj:copy(obj1)

    @step(kvs) {
      #len = Arr:len(kvs)

      ? (len = 0) {
        << o
      }

      #kv = kvs[1]
      #kvsCont = Arr:slice(kvs, 2, (len + 1))
      Obj:set(o, kv[1], kv[2])

      step(kvsCont)
    }

    step(Obj:kvs(obj2))
  }

  @not1(fn) {
    @(param) {
      ? fn(param) { no } . { yes }
    }
  }
}

:: Stream {
  @resultOk(read, stream) {
    {
      ok: yes
      read: read
      stream: stream
    }
  }

  @resultFail() {
    {
      ok: no
    }
  }

  @mk(str, pos) {
    {
      str: str
      pos: pos
    }
  }

  @of(str) {
    mk(str, 1)
  }

  @read(stream, length) {
    #remainingLength = ((Str:len(stream.str) - stream.pos) + 1)

    ? (length > remainingLength) {
      << resultFail()
    }

    #newPos = (stream.pos + length)

    resultOk(Str:slice(stream.str, stream.pos, newPos), mk(stream.str, newPos))
  }
}

:: Parser {
  // Constructors

  @resultOk(stream, value) {
    {
      ok: yes
      stream: stream
      value: value
    }
  }

  @resultFail(stream, error) {
    {
      ok: no
      stream: stream
      error: error
    }
  }

  @mk(parse) {
    {
      parse: parse
    }
  }

  @ok(value) {
    mk(@(stream) { resultOk(stream, value) })
  }

  @fail(error) {
    mk(@(stream) { resultFail(stream, error) })
  }

  @anyToken(length) {
    mk(@(stream) {
      #result = Stream:read(stream, length)

      ? result.ok {
        << resultOk(result.stream, result.read)
      }

      resultFail(stream, "End of input")
    })
  }

  @eof() {
    mk(@(stream) {
      #result = Stream:read(stream, 1)

      ? result.ok {
        << resultFail(stream, "Expected end of input")
      }

      resultOk(stream, yes)
    })
  }

  // Basic operators

  @then(cont) {
    @(parser) {
      mk(@(stream) {
        #result = parser.parse(stream)

        ? result.ok {
          #parserCont = cont(result.value)
          << parserCont.parse(result.stream)
        }

        result
      })
    }
  }

  @map(fn) {
    @(parser) {
      mk(@(stream) {
        #result = parser.parse(stream)

        ? result.ok {
          << resultOk(result.stream, fn(result.value))
        }

        result
      })
    }
  }

  // Generic combinators

  @satisfy(condition, description) {
    @(parser) {
      mk(@(stream) {
        #result = parser.parse(stream)

        ? result.ok {
          ? condition(result.value) {
            << resultOk(result.stream, result.value)
          }

          << resultFail(stream, description)
        }

        result
      })
    }
  }

  @oneOf(parsers) {
    mk(@(stream) {
      @run(ps, errors) {
        #len = Arr:len(ps)

        ? (len = 0) {
          << resultFail(stream, Arr:join(["All parsers failed: " Arr:join(errors, "; ")]))
        }

        #parser = ps[1]
        #result = parser.parse(stream)

        ? result.ok {
          << result
        }

        #psCont = Arr:slice(ps, 2, (len + 1))
        #errorsCont = Arr:join(["(" Core:to_str(Arr:len(errors)) ") " result.error])
        run(psCont, Arr:concat(errors, [errorsCont]))
      }

      run(parsers, [])
    })
  }

  @many(parser) {
    @run(matches) {
      mk(@(stream) {
        #result = parser.parse(stream)

        ? result.ok {
          #step = run(Arr:concat(matches, [result.value]))
          << step.parse(result.stream)
        }

        resultOk(result.stream, matches)
      })
    }

    run([])
  }

  @many1(parser) {
    Util:pipe([
      many(parser)
      satisfy(@(value) {
        ? (Arr:len(value) = 0) { no } . { yes }
      }, "Expected at least one match")
    ])
  }

  // Specialized string parsers

  @token(str) {
    Util:pipe([
      anyToken(Str:len(str))
      satisfy(@(value) {
        ? (value = str) { yes } . { no }
      }, Arr:join(["Expected '" str "'"]))
    ])
  }

  @takeWhile(condition) {
    mk(@(stream) {
      #matches = []

      @run(s) {
        #result = Stream:read(s, 1)

        ? result.ok {
          ? condition(result.read) {
            Arr:push(matches, result.read)
            << run(result.stream)
          }
        }

        resultOk(s, Arr:join(matches))
      }

      run(stream)
    })
  }

  @takeWhile1(condition) {
    Util:pipe([
      takeWhile(condition)
      satisfy(@(value) {
        ? (Str:len(value) = 0) { no } . { yes }
      }, "Expected at least one match")
    ])
  }
}

:: ParserStore {
  @mk(parser) {
    {
      parser: parser
    }
  }

  @create() {
    mk(Parser:ok({}))
  }

  @merge(parserFn) {
    @(store) {
      mk(
        Util:pipe([
          store.parser
          Parser:then(@(value1) {
            #parser = parserFn(value1)
            Util:pipe([
              parser
              Parser:map(@(value2) {
                Util:merge(value1, value2)
              })
            ])
          })
        ])
      )
    }
  }

  @skip(parserFn) {
    @(store) {
      mk(
        Util:pipe([
          store.parser
          Parser:then(@(value) {
            #parser = parserFn(value)
            Util:pipe([
              parser
              Parser:map(@() { value })
            ])
          })
        ])
      )
    }
  }

  @store(key, parserFn) {
    merge(@(value1) {
      #parser = parserFn(value1)
      Util:pipe([
        parser
        Parser:map(@(value2) {
          #o = {}
          Obj:set(o, key, value2)
          o
        })
      ])
    })
  }

  @parser(store) {
    store.parser
  }
}

#spaces = Parser:takeWhile(@(value) {
  ? (value = " ") { yes } . { no }
})

#mfmTagOpen = Parser:token("$[")

#mfmTagName = Parser:takeWhile1(@(value) {
  ? (value = " ") { no } . { yes }
})

#mfmTagClose = Parser:token("]")

#mfmTagText = Parser:takeWhile1(@(value) {
  ? Str:incl("`$]", value) { no } . { yes }
})

#codeToggle = Parser:token("`")

#codeBlockToggle = Parser:token("```")

#codeText = Parser:takeWhile1(@(value) {
  ? (value = "`") { no } . { yes }
})

#code = Util:pipe([
  ParserStore:create()
  ParserStore:skip(@() { codeToggle })
  ParserStore:store("content", @() { codeText })
  ParserStore:skip(@() { codeToggle })
  ParserStore:parser
  Parser:map(@(store) { Arr:join(["`" store.content "`"]) })
])

#codeBlock = Util:pipe([
  ParserStore:create()
  ParserStore:skip(@() { codeBlockToggle })
  ParserStore:store("content", @() { codeText })
  ParserStore:skip(@() { codeBlockToggle })
  ParserStore:parser
  Parser:map(@(store) { Arr:join(["`" store.content "`"]) })
])

#mfmTag = Util:pipe([
  ParserStore:create()
  ParserStore:skip(@() { mfmTagOpen })
  ParserStore:skip(@() { mfmTagName })
  ParserStore:skip(@() { spaces })
  ParserStore:store("content", @() { mfmTagContent })
  ParserStore:skip(@() { mfmTagClose })
  ParserStore:parser
  Parser:map(@(store) { store.content })
])

#mfmTagContent = Util:pipe([
  Parser:many(
    Parser:oneOf([
      mfmTagText
      codeBlock
      code
      mfmTag
      Parser:token("`")
      Parser:token("$")
    ])
  )
  Parser:map(@(parts) { Arr:join(parts) })
])

#noteText = Parser:takeWhile1(@(value) {
  ? Str:incl("`$", value) { no } . { yes }
})

#noteContent = Util:pipe([
  Parser:many(
    Parser:oneOf([
      noteText
      codeBlock
      code
      mfmTag
      Parser:token("`")
      Parser:token("$")
    ])
  )
  Parser:map(@(parts) { Arr:join(parts) })
])

@strip(t) {
  #result = noteContent.parse(Stream:of(t))

  ? result.ok {
    << result.value
  }

  Arr:join(["Error at position " Core:to_str(result.stream.pos) ": " result.error])
}

$input <- "Here is $[rainbow $[x2 an example] input]."
$output <- strip(input)

@onUpdated(name, value) {
  ? (name = "input") { input <- value }
  output <- strip(input)
}

MkPages:updated(onUpdated)
